using System;
using UnityEngine;

public class mqttPointerController : MonoBehaviour
{
    [Tooltip("Optional name for the controller")]
    public string nameController = "Controller 1";
    public string tag_mqttManager = ""; // To be set on the Inspector panel. It must match one of the mqttManager.cs GameObject

    [Header("   Case Sensitive!!")]
    [Tooltip("The topic to subscribe must contain this value. !!Case Sensitive!!")]
    public string topicSubscribed = ""; // The topic to subscribe, it needs to match a topic from the mqttManager

    private float pointerValue = 0.0f;

    [Space]
    public GameObject objectToControl; // Pointer of the gauge, or other 3D models

    [Tooltip("Select the rotation axis of the object to control")]
    public enum State { X, Y, Z };
    public State rotationAxis;

    [Space]
    [Tooltip("Direction Rotation")]
    public bool CW = true; // CW True = 1; CW False = -1
    private int rotationDirection = 1;

    [Space]
    [Tooltip("Minimum value on the dial")]
    public float startValue = 0f; // Start value of the gauge

    [Tooltip("Maximum value on the dial")]
    public float endValue = 180f; // End value of the gauge

    [Tooltip("Full extension of the gauge in EulerAngles")]
    public float fullAngle = 180f; // Full extension of the gauge in EulerAngles

    [Tooltip("Adjust the origin of the scale. Negative values CCW; positive value CW")]
    public float adjustedStart = 0f; // Negative values CCW; positive values CW

    [Space]
    public mqttManager _eventSender;

    void Awake()
    {
        if (GameObject.FindGameObjectsWithTag(tag_mqttManager).Length > 0)
        {
            _eventSender = GameObject.FindGameObjectsWithTag(tag_mqttManager)[0].gameObject.GetComponent<mqttManager>();
            _eventSender.Connect(); // Connect the Manager when the object is spawned
        }
        else
        {
            Debug.LogError("At least one GameObject with mqttManager component and Tag == tag_mqttManager needs to be provided");
        }
    }

    void OnEnable()
    {
        _eventSender.OnMessageArrived += OnMessageArrivedHandler;
    }

    void OnDisable()
    {
        _eventSender.OnMessageArrived -= OnMessageArrivedHandler;
    }

    private void OnMessageArrivedHandler(mqttObj mqttObject)
    {
        if (mqttObject.topic.Contains(topicSubscribed))
        {
            var response = JsonUtility.FromJson<WeatherData.Root>(mqttObject.msg);
            if (response != null)
            {
                // Calculate apparent temperature
                float waterVaporPressure = (response.outHumidity / 100) * 6.105f * Mathf.Exp((17.27f * response.outTemp_C) / (237.7f + response.outTemp_C));
                float apparentTemperature = (1.04f * response.outTemp_C) + (0.2f * waterVaporPressure) - (0.65f * response.windSpeed10_kph) - 2.7f;

                // Scale the apparent temperature to a pointer value
                pointerValue = Mathf.Clamp((apparentTemperature + 11.5f) * 1.5f, startValue, endValue);

                Debug.Log("Apparent Temperature: " + apparentTemperature + ", Pointer Value: " + pointerValue);
            }
        }
    }

    private void Update()
    {
        float step = 1.5f * Time.deltaTime;
        rotationDirection = CW ? 1 : -1;

        if (pointerValue >= startValue)
        {
            Vector3 rotationVector = new Vector3();

            if (rotationAxis == State.X)
            {
                rotationVector = new Vector3(
                    (rotationDirection * ((pointerValue - startValue) * (fullAngle / (endValue - startValue)))) - adjustedStart,
                    objectToControl.transform.localEulerAngles.y,
                    objectToControl.transform.localEulerAngles.z);
            }
            else if (rotationAxis == State.Y)
            {
                rotationVector = new Vector3(
                    objectToControl.transform.localEulerAngles.x,
                    (rotationDirection * ((pointerValue - startValue) * (fullAngle / (endValue - startValue)))) - adjustedStart,
                    objectToControl.transform.localEulerAngles.z);
            }
            else if (rotationAxis == State.Z)
            {
                rotationVector = new Vector3(
                    objectToControl.transform.localEulerAngles.x,
                    objectToControl.transform.localEulerAngles.y,
                    (rotationDirection * ((pointerValue - startValue) * (fullAngle / (endValue - startValue)))) - adjustedStart);
            }

            objectToControl.transform.localRotation = Quaternion.Lerp(
                objectToControl.transform.localRotation,
                Quaternion.Euler(rotationVector),
                step);
        }
    }
}

[Serializable]
public class WeatherData
{
    [Serializable]
    public class Root
    {
        public float outTemp_C;        // Temperature in Celsius
        public float windSpeed10_kph;   // Wind speed in kilometers per hour
        public float outHumidity;     // Humidity percentage
    }
}
